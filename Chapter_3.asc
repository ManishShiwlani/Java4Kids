:toc:
:toclevels: 4
:imagesdir: ./

== Chapter 3. Java Classes - Pet and Fish

Java programs consist of _classes_ that represent _objects_ from the real world. A class is a type. An object is a representative of a type. For instance, you can see ten dogs on the street, and they all represent a class Dogs. Programmers start working on an application with deciding  which Java classes to include in the program and how many objects of each type to create. Say, they can define a class Player and create to objects of this type. 

=== Classes and Objects

* Java classes can have methods and attributes.
* Methods define actions that a class can perform.
* Attribute describe various attributes of a class.

Let’s create a class named `VideoGame`. This class may have several methods, which can tell _what an object of this class can do_: start the game, stop it, save the score, ask for lives on Facebook, and so on. This class also may have some attributes (a.k.a. properties): price, screen size, number of remote controls and others. An object that represent a class `VideoGame` can look like this:

[[FIG3-2]]
.An object VideoGame
image::images/fig_3_01.png[width=400, height=550] 

We also use the term `an instance` of an object. If a game factory will produce ten thousand of such games, a programmer can say that they created ten thousand instances of the class `VideoGame`. In Java language the class `VideoGame` may look like this:

[[FIG3-3]]
.???
image::images/fig_3_03.png[]

Our class `VideoGame` should be similar to other classes that represent video games – all of them have screens of different size and color,  all of them perform similar actions, and all of them cost money.  
 
We can be more specific and create another Java class called `GameBoyAdvance`. It also belongs to the family of video games, but has some properties that are specific to the model GameBoy Advance, for example a cartridge type.

[[FIG3-4]]
.???
image::images/fig_3_04.png[]

In this example the class `GameBoyAdvance` defines two attributes – `cartridgeType` and `screenWidth` and two methods – `startGame()` and `stopGame()`. But these methods can’t perform any actions just yet, because they have no Java code between the curly braces.

[[FIG3-5]]
.???
image::images/fig_3_05.png[]

A factory description of the GameBoy Advance relates to an actual game the same way as a Java class relates to its instance in memory. The process of building actual games based on this description in the game factory is similar to the process of creating instances of  `GameBoy` objects in Java.

[[FIG3-6]]
.???
image::images/fig_3_06.png[]

In many cases, a program can use a Java class only after its instance has been created. Vendors also create thousands of game copies based on the same description. Even though these copies represent the same class, they may have different _values_ in their attributes - some of them are blue, while others are silver, and so on. In other words, a program may create multiple instances of the `GameBoyAdvance` objects.  

=== Data Types

Java _variables_ represent attributes of a class, method arguments or could be used inside the method for a short-time storage of some data.  Variables have to be declared first, and only after this is done you can use them. 

Remember equations like y=x+2?  In Java you’d need to declare the variables x and y of some numeric data type like integer or `double`:

`int x;`
`int y;`

The next two lines show how you can assign a _value_ to these variables. If your program assigns the value of five to the variable x, the variable y will be equal to seven:

`x=5;`
`y=x+2;`

In Java you are also allowed to change the value of a variable in a somewhat unusual way. The following two lines change the value of the variable y from five to six:

`int y=5;`
`y++;`

Despite the two plus signs, JVM is still going to increment the value of the variable y `by one`.

After the next code fragment the value of the variable `myScore` is also six:

`int myScore=5;`
`myScore=myScore+1;`

You can also use multiplication, division and subtraction the same way. Look at the following piece of code:

`int myScore=10;`

`myScore--;`
`myScore=myScore*2;`
`myScore=myScore/3;`

`System.out.println("My score is " + myScore);`

What this code prints? Eclipse has a cool feature called a scrapbook that allows quickly test any code snippet (like the one above) without even creating a class. Select menus _File_, _New_, _Scrapbook Page_ and type the word `Test` as the name of your scrapbook file. 
 
Now enter these five lines that manipulate with `myScore` in the scrap book, highlight them, and click on the little looking glass on the toolbar. 

[[FIG3-7]]
.???
image::images/fig_3_07.png[]

To see the result of the score calculations, just  click on the console tab at the bottom of the screen:

`My score is 6`

In this example the argument of the method `println()` was glued from two pieces – the text “My score is ” and the value of the variable `myScore`, which was six. Creation of a `String` from pieces is called _concatenation_.  Even though `myScore` is a number, Java is smart enough to convert this variable into a `String`, and then attach it to the text _My Score is_.

Look at some other ways of changing the values of the variables:

`myScore=myScore*2`; is the same as `myScore*=2`;
`myScore=myScore+2`; is the same as `myScore+=2`;
`myScore=myScore-2`; is the same as `myScore-=2`;
`myScore=myScore/2`; is the same as `myScore/=2`;

There are eight simple, or _primitive_ data types in Java, and you have to decide which ones to use depending on the type and size of data that you are planning to store in your variables:

* Four data types for storing integer values – `byte`, `short`, `int`, and `long`.

* Two data types for values with a decimal point – `float` and `double`.

* One data type for storing a single character – `char`.

* One _logical_ data type called boolean that allows only two  values:  `true` or `false`.

You can assign an initial value to a variable during its declaration and this is called _variable initialization_:

`char grade = 'A';`
`int chairs = 12; `                          
`boolean playSound = false;`         
`double nationalIncome = 23863494965745.78;`
`float gamePrice = 12.50f;`      
`long totalCars =4637283648392l;` 

In the last two lines `f` means float and `l` means long.

If you don’t initialize the variables, Java will do it for you by assigning zero to each numeric variable, `false` to `boolean` variables, and a special code ‘\u0000’ to a `char`.

There is also a special keyword `final`, and if it’s used in a variable declaration, you can assign a value to this variable only once, and this value cannot be changed afterwards. In some languages the final variables are called _constants_. In Java we usually name final variables using capital letters:

`final String STATE_CAPITAL="Washington";`

In addition to primitive data types, you can also use Java classes to declare variables. Each primitive data type has a corresponding _wrapper_ class, for example `Integer`, `Double`, `Boolean`, etc. These classes have useful methods to convert data from one type to another.
 
While a `char` data type is used to store only one character, Java also has a class `String` for working with a longer text, for example: 

`String lastName="Smith";`

In Java, variable names cannot start with a digit and can not contain spaces.
 
[[FIG3-8]]
.???
image::images/fig_3_08.png[]

=== Creation of a  Pet

Let’s design and create a class `Pet`. First we need to decide what actions our pet will be able to do. How about eat, sleep, and say? We’ll program these actions in the methods of the class `Pet`. We’ll also give our pet the following  attributes: age, height, weight, and color.

Start with creating a new Java class called `Pet` in _My First Project_ as described in Chapter 2, but do not mark the box for creation of the method `main()`.


Your screen should look similar to this one:

[[FIG3-9]]
.??? 
image::images/fig_3_09.png[]

Now we are ready to declare attributes and methods in the class `Pet`.  Java classes and methods enclose their bodies in curly braces. Every open curly brace must  have a matching closing brace:

[[FIG3-10]]
.???
image::images/fig_3_10.png[]

To declare variables for class attributes we should pick data types for them. I suggest an `int` type for the age, `float` for  weight and height, and `String` for a pet’s color.

[[FIG3-11]]
.???
image::images/fig_3_11.png[]

The next step is to add some methods to this class. Before declaring a method you should decide if it should take any arguments and return a value:

* The method `sleep()` will just print a message _Good night, see you tomorrow_ – it does not need any arguments and will not return any value. 

* The same is true for the method `eat()`.It will print the message _I’m so hungry…let me have a snack like nachos!_.  

* The method `say()` will also print a message, but the pet will “say” (print) the word or a phrase that we give to  it. We’ll pass this word to the method `say()` as a _method argument_. The method will build a phrase using this argument and will return it back to the calling program. 

The new version of the class `Pet` will look like this:

[[FIG3-12]]
.???
image:images/fig_3_12.png[]


This class represents a friendly creature from the real world:

[[FIG3-13]]
.???
image::images/fig_3_13.png[]

Let’s talk now about the signature of the method `sleep()`:

`public void sleep()`

It tells us that this method can be called from any other Java class (`public`), it does not return any data (`void`).  The empty parentheses mean that this method does not have any arguments, because it does not need any data from the outside world – it always prints the same text.

The signature of the method `say()` looks like this:

`public String say(String aWord)`

This method can also be called from any other Java class, but has to return some text, and  this is the meaning of the keyword String in front of the method name. Besides, it expects some text data from outside, hence the argument `String aWord`.

[[FIG3-14]]
.???
image::images/fig_3_14.png[]

How do you decide if a method should or should not return a value? If a method performs some data manipulations and has to give the result of these  manipulations back to a calling class, it has to return a value.  You may say, that the class `Pet` does not have any calling class! That’s correct, so let’s create one called `PetMaster`. This class will have a method `main()`containing  the code to communicate with the class `Pet`. Just create  another class `PetMaster`, and this time select the option in  Eclipse that creates the method `main()`. Remember, without this method you cannot _run_ this class as a program. Modify the code generated by Eclipse to look like this:

[[FIG3-15]]
.???
image::images/fig_3_15.png[]


Do not forget to press _Ctrl-S_ to save and compile this class! 
To run the class `PetMaster` click on the Eclipse menus _Run_, _Run…_, _New_ and type the name of the main class: `PetMaster`. Push the button _Run_ and the program will print the following text:

`I’m so hungry…let me have a snack like nachos!`
`OK!! OK!! Tweet!! Tweet!!`
`Good night, see you tomorrow`

The `PetMaster` is the _calling class_, and it starts with creating an _instance_ of the object `Pet`. It declares a variable `myPet` and uses the Java operator new:

`Pet myPet = new Pet();`

This line declares a variable of the type `Pet`  (that’s right, you can treat any classes created by you as new Java data types). Now the variable `myPet` knows where the `Pet` instance was created in the computer’s memory, and you can use this variable to call any methods from the class `Pet`, for example:

`myPet.eat();`

If a method returns a value, you should call this method in a different way. Declare a variable that has the same type as the return value of the method,  and assign it to this variable.  Now you can call this method:
  
`String petReaction;`	

`petReaction = myPet.say("Tweet!! Tweet!!");`


At this point the returned value is stored in the variable `petReaction` and if you want to see what’s in there,  be my guest:

`System.out.println(petReaction);`

[[FIG3-16]]
.???
image::images/fig_3_16.png[]
  

=== Inheritance – a Fish is Also a Pet

Our class `Pet` will help us learn yet another important feature of Java called _inheritance_. In the real life, every person inherits some features from his or her parents. Similarly, in the Java world you can also create a new class, based on the existing one. 

The class `Pet` has behavior and attributes that are shared by many pets – they eat, sleep, some of them make sounds, their skins have different colors, and so on. On the other hand, pets are different  - dogs bark, fish swim and do not make sounds, parakeets  speak better than dogs. But all of them eat, sleep, have a weight and height. That’s why it’s easier to create a class `Fish` that will _inherit_ some common behaviors and attributes from the class `Pet`, rather than creating `Dog`, `Parrot` or `Fish` from scratch every time. 

A special keyword `extends` that will do the trick:

[[FIG3-17]]
.???
image::images/fig_3_17.png[]

You can say that our `Fish` is a _subclass_ of the class `Pet`, and the class `Pet` is a _superclass_ of the class `Fish`. In other words, you use the class `Pet` as a template for creating a class `Fish`.

Even if you will leave the class `Fish` as it is now, you can still use every method and attribute inherited from  the class `Pet`. Take a look:

`Fish myLittleFish = new Fish();`
`myLittleFish.sleep();`

Even though we have not declared any methods in the class `Fish` yet, we are allowed to call the method `sleep()` from its superclass!

Creation of subclasses in Eclipse is a piece of cake! Select the menus _File_, _New_, _Class_, and type `Fish` as the name of the class. Replace the `java.lang.Object` in the field superclass with the word `Pet`.  

[[FIG3-18]]
.???
image::images/fig_3_18.png[]

Let’s not forget, however, that we’re  creating  a subclass of a `Pet` to add some new features that only fish have, and  reuse some of  the code that we wrote for a general  pet.

[[FIG3-19]]
.???
image::images/fig_3_19.png[]
 
Not all pets can dive, but fish certainly can. Let’s add a new method `dive()` to the class `Fish` now. 

[[FIG3-20]]
.???
image::images/fig_3_20.png[]

The method `dive()` has an _argument_  `howDeep` that tells the fish how deep it should go. We’ve also declared a class variable `currentDepth` that will store and update the current depth every time you call the method `dive()`. This method returns the current value of the variable `currenDepth` to the calling class. 

Please create another class `FishMaster` that will look like this:

[[FIG3-21]]
.???
image::images/fig_3_21.png[]

The method `main()` instantiates the object Fish and calls its method `dive()` twice with different arguments. After that, it calls the method `sleep()`. When you run the program `FishMaster`, it will print the following messages:

`Diving for 2 feet`
`I'm at 2 feet below sea level`
`Diving for 3 feet`
`I'm at 5 feet below sea level`
`Good night, see you tomorrow`

Have you noticed that beside methods defined in the class `Fish`, the `FishMaster` also calls methods from its superclass `Pet?` That’s the whole point of inheritance  – you do not have to copy and paste code from the class Pet – just use the word extends, and the class Fish can use Pet’s methods! 

[[FIG3-22]]
.???
image::images/fig_3_22.png[]

One more thing, even though the method `dive()` returns the value of  `currentDepth`, our `FishMaster` does not use it. That’s fine, our `FishMaster` does not need this value, but there may be some other classes that will also use `Fish`, and they may find it useful. For example, think of a class `FishTrafficDispatcher` that has to know positions of other fish under  the sea before allowing diving to avoid traffic accidents ☺.

=== Method Overriding

As you know, fish do not speak (at least they do not do it aloud). But our class `Fish` has been inherited from the class `Pet` that has a method `say()`. This means that nothing stops you from writing something like this:

`myFish.say();`

Well, our fish started to talk… If you do not want this to happen, the class `Fish` has to _override_ the Pet’s method `say()`. This is how it works: if you declare in a subclass a method with exactly the same signature as in its superclass, the method of the subclass will be used instead of  the method of the superclass. Let’s add the method `say()` to the class `Fish`.

[[FIG3-23]]
.???
image::images/fig_3_23.png[]

Now add the following three lines to the method `main()` of the class `FishMaster`:

`String fishReaction;`
`fishReaction = myFish.say("Hello");`
`System.out.println(fishReaction);`

Run the program and it’ll print 

``Don't you know that fish do not talk?`

This proves that `Pet`’s method `say()` has been _overridden_, or in other words suppressed.

[[FIG3-24]]
.???
image::images/fig_3_24.png[]

Wow!  We’ve learned a lot in this chapter – let’s just take a break.
 

=== Additional Reading

[[FIG3-25]]
.???
image::images/fig_3_25.png[]

http://java.sun.com/docs/books/tutorial/java/nutsandbolts/datatypes.html[1.Java Data Types]

http://java.sun.com/docs/books/tutorial/java/concepts/inheritance.html[2.About inheritance:]


=== Practice 

[[FIG3-26]]
.???
image::images/fig_3_26.png[]

1. Create a new class `Car` with the following methods:

`public void start()`
`public void stop()`
`public int drive(int howlong)`

The method `drive()` has to return the total distance driven by the car for the specified time. Use the following formula to calculate the distance:

`distance = howlong*60;`

2. Write another class `CarOwner` and that creates an instance of the object `Car`and call its methods.  The result of each method call has to be printed using `System.out.println()`.


=== Practice for Smarty Pants

[[FIG3-27]]
.???
image::images/fig_3_27.png[]

Create a subclass of `Car` named `JamesBondCar` and override the method `drive()` there. Use the following formula to calculate the distance: 

`distance = howlong*180;`

Be creative, print some funny messages!


